package com.rts.web.controller;import cn.hutool.core.codec.Base64Encoder;import cn.hutool.core.io.FileUtil;import cn.hutool.core.util.IdUtil;import cn.hutool.core.util.RandomUtil;import cn.hutool.core.util.StrUtil;import cn.hutool.core.util.ZipUtil;import cn.hutool.json.JSONUtil;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.qcloud.cos.model.COSObject;import com.qcloud.cos.model.COSObjectInputStream;import com.qcloud.cos.utils.IOUtils;import com.rts.maker.generator.main.GenerateTemplate;import com.rts.maker.generator.main.ZipGenerator;import com.rts.maker.meta.MetaValidator;import com.rts.web.annotation.AuthCheck;import com.rts.web.common.BaseResponse;import com.rts.web.common.DeleteRequest;import com.rts.web.common.ErrorCode;import com.rts.web.common.ResultUtils;import com.rts.web.constant.UserConstant;import com.rts.web.exception.BusinessException;import com.rts.web.exception.ThrowUtils;import com.rts.web.manager.CacheManager;import com.rts.web.manager.CosManager;import com.rts.maker.meta.Meta;import com.rts.web.model.dto.generator.*;import com.rts.web.model.entity.Generator;import com.rts.web.model.entity.User;import com.rts.web.model.vo.GeneratorVO;import com.rts.web.service.GeneratorService;import com.rts.web.service.UserService;import freemarker.template.TemplateException;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.BeanUtils;import org.springframework.util.StopWatch;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.*;import java.nio.file.Files;import java.nio.file.Paths;import java.nio.file.attribute.PosixFilePermission;import java.nio.file.attribute.PosixFilePermissions;import java.util.List;import java.util.Map;import java.util.Set;import java.util.concurrent.CompletableFuture;/** * @author Mona * @description 帖子接口 * @created in 2024/03/14 */@RestController@RequestMapping("/generator")@Slf4jpublic class GeneratorController {    @Resource    private GeneratorService generatorService;    @Resource    private UserService userService;    @Resource    private CosManager cosManager;    @Resource    private CacheManager cacheManager;    /**     * 创建     *     * @param generatorAddRequest 生成器添加请求     * @param request             请求     * @return {@link BaseResponse}<{@link Long}>     */    @PostMapping("/add")    public BaseResponse<Long> addGenerator(@RequestBody GeneratorAddRequest generatorAddRequest, HttpServletRequest request) {        if (generatorAddRequest == null) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        Generator generator = new Generator();        BeanUtils.copyProperties(generatorAddRequest, generator);        List<String> tags = generatorAddRequest.getTags();        generator.setTags(JSONUtil.toJsonStr(tags));        Meta.FileConfig fileConfig = generatorAddRequest.getFileConfig();        generator.setFileConfig(JSONUtil.toJsonStr(fileConfig));        Meta.ModelConfig modelConfig = generatorAddRequest.getModelConfig();        generator.setModelConfig(JSONUtil.toJsonStr(modelConfig));        // 参数校验        generatorService.validGenerator(generator, true);        User loginUser = userService.getLoginUser(request);        generator.setUserId(loginUser.getId());        generator.setStatus(0);        boolean result = generatorService.save(generator);        ThrowUtils.throwIf(!result, ErrorCode.OPERATION_ERROR);        long newGeneratorId = generator.getId();        return ResultUtils.success(newGeneratorId);    }    /**     * 删除     *     * @param deleteRequest 删除请求     * @param request       请求     * @return {@link BaseResponse}<{@link Boolean}>     */    @PostMapping("/delete")    public BaseResponse<Boolean> deleteGenerator(@RequestBody DeleteRequest deleteRequest, HttpServletRequest request) {        if (deleteRequest == null || deleteRequest.getId() <= 0) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        User user = userService.getLoginUser(request);        long id = deleteRequest.getId();        // 判断是否存在        Generator oldGenerator = generatorService.getById(id);        ThrowUtils.throwIf(oldGenerator == null, ErrorCode.NOT_FOUND_ERROR);        // 仅本人或管理员可删除        if (!oldGenerator.getUserId().equals(user.getId()) && !userService.isAdmin(request)) {            throw new BusinessException(ErrorCode.NO_AUTH_ERROR);        }        boolean b = generatorService.removeById(id);        return ResultUtils.success(b);    }    /**     * 更新（仅管理员）     *     * @param generatorUpdateRequest 生成器更新请求     * @return {@link BaseResponse}<{@link Boolean}>     */    @PostMapping("/update")    @AuthCheck(mustRole = UserConstant.ADMIN_ROLE)    public BaseResponse<Boolean> updateGenerator(@RequestBody GeneratorUpdateRequest generatorUpdateRequest) {        if (generatorUpdateRequest == null || generatorUpdateRequest.getId() <= 0) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        Generator generator = new Generator();        BeanUtils.copyProperties(generatorUpdateRequest, generator);        List<String> tags = generatorUpdateRequest.getTags();        generator.setTags(JSONUtil.toJsonStr(tags));        Meta.FileConfig fileConfig = generatorUpdateRequest.getFileConfig();        generator.setFileConfig(JSONUtil.toJsonStr(fileConfig));        Meta.ModelConfig modelConfig = generatorUpdateRequest.getModelConfig();        generator.setModelConfig(JSONUtil.toJsonStr(modelConfig));        // 参数校验        generatorService.validGenerator(generator, false);        long id = generatorUpdateRequest.getId();        // 判断是否存在        Generator oldGenerator = generatorService.getById(id);        ThrowUtils.throwIf(oldGenerator == null, ErrorCode.NOT_FOUND_ERROR);        boolean result = generatorService.updateById(generator);        return ResultUtils.success(result);    }    /**     * 根据 id 获取     *     * @param id      id     * @param request 请求     * @return {@link BaseResponse}<{@link GeneratorVO}>     */    @GetMapping("/get/vo")    public BaseResponse<GeneratorVO> getGeneratorVOById(long id, HttpServletRequest request) {        if (id <= 0) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        Generator generator = generatorService.getById(id);        if (generator == null) {            throw new BusinessException(ErrorCode.NOT_FOUND_ERROR);        }        return ResultUtils.success(generatorService.getGeneratorVO(generator, request));    }    /**     * 分页获取列表（仅管理员）     *     * @param generatorQueryRequest 生成器查询请求     * @return {@link BaseResponse}<{@link Page}<{@link Generator}>>     */    @PostMapping("/list/page")    @AuthCheck(mustRole = UserConstant.ADMIN_ROLE)    public BaseResponse<Page<Generator>> listGeneratorByPage(@RequestBody GeneratorQueryRequest generatorQueryRequest) {        long current = generatorQueryRequest.getCurrent();        long size = generatorQueryRequest.getPageSize();        Page<Generator> generatorPage = generatorService.page(new Page<>(current, size),                generatorService.getQueryWrapper(generatorQueryRequest));        return ResultUtils.success(generatorPage);    }    /**     * 分页获取列表（封装类）     *     * @param generatorQueryRequest 生成器查询请求     * @param request               请求     * @return {@link BaseResponse}<{@link Page}<{@link GeneratorVO}>>     */    @PostMapping("/list/page/vo")    public BaseResponse<Page<GeneratorVO>> listGeneratorVOByPage(@RequestBody GeneratorQueryRequest generatorQueryRequest,                                                                 HttpServletRequest request) {        long current = generatorQueryRequest.getCurrent();        long size = generatorQueryRequest.getPageSize();        // 限制爬虫        ThrowUtils.throwIf(size > 20, ErrorCode.PARAMS_ERROR);        StopWatch stopWatch = new StopWatch();        stopWatch.start();        Page<Generator> generatorPage = generatorService.page(new Page<>(current, size),                generatorService.getQueryWrapper(generatorQueryRequest));        stopWatch.stop();        System.out.println("查询生成器：" + stopWatch.getTotalTimeMillis());        stopWatch = new StopWatch();        stopWatch.start();        Page<GeneratorVO> generatorVOPage = generatorService.getGeneratorVOPage(generatorPage, request);        stopWatch.stop();        System.out.println("查询关联数据：" + stopWatch.getTotalTimeMillis());        return ResultUtils.success(generatorVOPage);    }    /**     * 快速分页获取列表（封装类）     *     * @param generatorQueryRequest 生成器查询请求     * @param request               请求     * @return {@link BaseResponse}<{@link Page}<{@link GeneratorVO}>>     */    @PostMapping("/list/page/vo/fast")    public BaseResponse<Page<GeneratorVO>> listGeneratorVOByPageFast(@RequestBody GeneratorQueryRequest generatorQueryRequest,                                                                     HttpServletRequest request) {        long current = generatorQueryRequest.getCurrent();        long size = generatorQueryRequest.getPageSize();        // 优先从缓存读取        String cacheKey = getPageCacheKey(generatorQueryRequest);        Object cacheValue = cacheManager.get(cacheKey);        if (cacheValue != null) {            return ResultUtils.success((Page<GeneratorVO>) cacheValue);        }        // 限制爬虫        ThrowUtils.throwIf(size > 20, ErrorCode.PARAMS_ERROR);        QueryWrapper<Generator> queryWrapper = generatorService.getQueryWrapper(generatorQueryRequest);        queryWrapper.select("id",                "name",                "description",                "tags",                "picture",                "status",                "userId",                "createTime",                "updateTime"        );        Page<Generator> generatorPage = generatorService.page(new Page<>(current, size), queryWrapper);        Page<GeneratorVO> generatorVOPage = generatorService.getGeneratorVOPage(generatorPage, request);        // 写入缓存        cacheManager.put(cacheKey, generatorVOPage);        return ResultUtils.success(generatorVOPage);    }    /**     * 分页获取当前用户创建的资源列表     *     * @param generatorQueryRequest 生成器查询请求     * @param request               请求     * @return {@link BaseResponse}<{@link Page}<{@link GeneratorVO}>>     */    @PostMapping("/my/list/page/vo")    public BaseResponse<Page<GeneratorVO>> listMyGeneratorVOByPage(@RequestBody GeneratorQueryRequest generatorQueryRequest,                                                                   HttpServletRequest request) {        if (generatorQueryRequest == null) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        User loginUser = userService.getLoginUser(request);        generatorQueryRequest.setUserId(loginUser.getId());        long current = generatorQueryRequest.getCurrent();        long size = generatorQueryRequest.getPageSize();        // 限制爬虫        ThrowUtils.throwIf(size > 20, ErrorCode.PARAMS_ERROR);        Page<Generator> generatorPage = generatorService.page(new Page<>(current, size),                generatorService.getQueryWrapper(generatorQueryRequest));        return ResultUtils.success(generatorService.getGeneratorVOPage(generatorPage, request));    }    /**     * 编辑（用户）     *     * @param generatorEditRequest 生成器编辑请求     * @param request              请求     * @return {@link BaseResponse}<{@link Boolean}>     */    @PostMapping("/edit")    public BaseResponse<Boolean> editGenerator(@RequestBody GeneratorEditRequest generatorEditRequest, HttpServletRequest request) {        if (generatorEditRequest == null || generatorEditRequest.getId() <= 0) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        Generator generator = new Generator();        BeanUtils.copyProperties(generatorEditRequest, generator);        List<String> tags = generatorEditRequest.getTags();        generator.setTags(JSONUtil.toJsonStr(tags));        Meta.FileConfig fileConfig = generatorEditRequest.getFileConfig();        generator.setFileConfig(JSONUtil.toJsonStr(fileConfig));        Meta.ModelConfig modelConfig = generatorEditRequest.getModelConfig();        generator.setModelConfig(JSONUtil.toJsonStr(modelConfig));        // 参数校验        generatorService.validGenerator(generator, false);        User loginUser = userService.getLoginUser(request);        long id = generatorEditRequest.getId();        // 判断是否存在        Generator oldGenerator = generatorService.getById(id);        ThrowUtils.throwIf(oldGenerator == null, ErrorCode.NOT_FOUND_ERROR);        // 仅本人或管理员可编辑        if (!oldGenerator.getUserId().equals(loginUser.getId()) && !userService.isAdmin(loginUser)) {            throw new BusinessException(ErrorCode.NO_AUTH_ERROR);        }        boolean result = generatorService.updateById(generator);        return ResultUtils.success(result);    }    /**     * 根据 id 下载     *     * @param id       id     * @param request  请求     * @param response 响应     * @throws IOException ioexception     */    @GetMapping("/download")    public void downloadGeneratorById(long id, HttpServletRequest request, HttpServletResponse response) throws IOException {        if (id <= 0) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        User loginUser = userService.getLoginUser(request);        Generator generator = generatorService.getById(id);        if (generator == null) {            throw new BusinessException(ErrorCode.NOT_FOUND_ERROR);        }        String filepath = generator.getDistPath();        if (StrUtil.isBlank(filepath)) {            throw new BusinessException(ErrorCode.NOT_FOUND_ERROR, "产物包不存在");        }        // 追踪事件        log.info("用户 {} 下载了 {}", loginUser, filepath);        COSObjectInputStream cosObjectInput = null;        try {            COSObject cosObject = cosManager.getObject(filepath);            cosObjectInput = cosObject.getObjectContent();            // 处理下载到的流            byte[] bytes = IOUtils.toByteArray(cosObjectInput);            // 设置响应头            response.setContentType("application/octet-stream;charset=UTF-8");            response.setHeader("Content-Disposition", "attachment; filename=" + filepath);            // 写入响应            response.getOutputStream().write(bytes);            response.getOutputStream().flush();        } catch (Exception e) {            log.error("file download error, filepath = " + filepath, e);            throw new BusinessException(ErrorCode.SYSTEM_ERROR, "下载失败");        } finally {            if (cosObjectInput != null) {                cosObjectInput.close();            }        }    }    /**     * 使用代码生成器     *     * @param generatorUseRequest 生成器使用请求     * @param request             请求     * @param response            响应     * @throws IOException ioexception     */    @PostMapping("/use")    public void useGenerator(@RequestBody GeneratorUseRequest generatorUseRequest, HttpServletRequest            request, HttpServletResponse response) throws IOException {        Map<String, Object> dataModel = generatorUseRequest.getDataModel();        // 需要登录 User        User loginUser = userService.getLoginUser(request);        Generator generator = generatorService.getById(loginUser.getId());        if (generator == null) {            throw new BusinessException(ErrorCode.NOT_FOUND_ERROR);        }        // 生成器存储路径        String distPath = generator.getDistPath();        if (StrUtil.isBlank(distPath)) {            throw new BusinessException(ErrorCode.NOT_FOUND_ERROR, "产物包不存在");        }        // 工作空间        String projectPath = System.getProperty("user.dir");        String tempDirPath = String.format("%s/.temp/use/%s", projectPath, loginUser.getId());        String zipFilePath = tempDirPath + "/dist.zip";        // 新建文件        if (!FileUtil.exist(zipFilePath)) {            FileUtil.touch(zipFilePath);        }        // 下载文件        try {            cosManager.download(distPath, zipFilePath);        } catch (InterruptedException e) {            throw new BusinessException(ErrorCode.SYSTEM_ERROR, "生成器下载失败");        }        // 解压文件,得到脚本文件        File unzipDistDir = ZipUtil.unzip(zipFilePath);        // 将用户输入的参数写入到json        String dataModelFilePath = tempDirPath + "/dataModel.json";        String jsonStr = JSONUtil.toJsonStr(dataModel);        FileUtil.writeUtf8String(jsonStr, dataModelFilePath);        // 执行脚本        // 找到脚本文件所在路径        File scriptFile = FileUtil.loopFiles(unzipDistDir, 2, null).stream().filter(file -> file.isFile() && "generator".equals(file.getName())).findFirst().orElseThrow(RuntimeException::new);        // 添加可执行权限        try {            Set<PosixFilePermission> permissions = PosixFilePermissions.fromString("rwxrwxrwx");            Files.setPosixFilePermissions(scriptFile.toPath(), permissions);        } catch (Exception e) {        }        // 构造命令        File scriptDir = scriptFile.getParentFile();        // 注意，如果是 mac / linux 系统，要用 "./generator"        String scriptAbsolutePath = scriptFile.getAbsolutePath().replace("\\", "/");        String[] commands = new String[]{"./generator", "json-generate", "--file=" + dataModelFilePath};        // 这里一定要拆分！        ProcessBuilder processBuilder = new ProcessBuilder(commands);        processBuilder.directory(scriptDir);        try {            Process process = processBuilder.start();            // 读取命令的输出            InputStream inputStream = process.getInputStream();            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));            String line;            while ((line = reader.readLine()) != null) {                System.out.println(line);            }            // 等待命令执行完成            int exitCode = process.waitFor();            System.out.println("命令执行结束，退出码：" + exitCode);        } catch (Exception e) {            e.printStackTrace();            throw new BusinessException(ErrorCode.SYSTEM_ERROR, "执行生成器脚本错误");        }        // 压缩得到的生成结果,返回给前端        // 生成代码的位置        String generatedPath = scriptDir.getAbsolutePath() + "/generated";        String resultPath = tempDirPath + "/result.zip";        File resultFile = ZipUtil.zip(generatedPath, resultPath);        // 下载文件        // 设置响应头        response.setContentType("application/octet-stream;charset=UTF-8");        response.setHeader("Content-Disposition", "attachment; filename=" + resultFile.getName());        // 写入响应        Files.copy(resultFile.toPath(), response.getOutputStream());        // 删除临时文件        CompletableFuture.runAsync(() -> {            FileUtil.del(tempDirPath);        });    }    /**     * 制作代码生成器     *     * @param generatorMakeRequest 发电机发出请求     * @param request              请求     * @param response             响应     */    @PostMapping("/make")    public void makeGenerator(@RequestBody GeneratorMakeRequest generatorMakeRequest, HttpServletRequest            request, HttpServletResponse response) throws IOException {        // 输入参数        Meta meta = generatorMakeRequest.getMeta();        String zipFilePath = generatorMakeRequest.getZipFilePath();        // 需要登录 User        User loginUser = userService.getLoginUser(request);        // 判断模板文件是否存在        if (StrUtil.isBlank(zipFilePath)) {            throw new BusinessException(ErrorCode.NOT_FOUND_ERROR, "压缩包不存在");        }        // 定义工作空间        String projectPath = System.getProperty("user.dir");        String id = IdUtil.getSnowflakeNextId() + RandomUtil.randomString(6);        String tempDirPath = String.format("%s/.temp/make/%s", projectPath, id);        String localZipFilePath = tempDirPath + "/project.zip";        // 新建文件        if (!FileUtil.exist(localZipFilePath)) {            FileUtil.touch(localZipFilePath);        }        // 下载文件        try {            cosManager.download(zipFilePath, localZipFilePath);        } catch (InterruptedException e) {            throw new BusinessException(ErrorCode.SYSTEM_ERROR, "压缩包下载失败");        }        // 解压文件        File unzipDistDir = ZipUtil.unzip(localZipFilePath);        // 构造 meta 对象和输出路径        String sourceRootPath = unzipDistDir.getAbsolutePath();        meta.getFileConfig().setSourceRootPath(sourceRootPath);        // 参数校验        MetaValidator.doValidAndFill(meta);        String outputPath = String.format("%s/generated/%s", tempDirPath, meta.getName());        // 调用maker - 制作        GenerateTemplate generateTemplate = new ZipGenerator();        try {            generateTemplate.doGenerate(meta, outputPath);        } catch (Exception e) {            throw new BusinessException(ErrorCode.SYSTEM_ERROR, "制作失败");        }        // 压缩得到的生成结果,返回给前端        String suffix = "-dist.zip";        String zipFileName = meta.getName() + suffix;        String distZipFilePath = outputPath + suffix;        // 下载        response.setContentType("application/octet-stream;charset=UTF-8");        response.setHeader("Content-Disposition", "attachment; filename=" + zipFileName);        // 写入响应        Files.copy(Paths.get(distZipFilePath), response.getOutputStream());        // 删除临时文件        CompletableFuture.runAsync(() -> {            FileUtil.del(tempDirPath);        });    }    /**     * 缓存代码生成器     *     * @param generatorCacheRequest 生成器缓存请求     * @param request               请求     * @param response              响应     * @throws IOException ioexception     */    @PostMapping("/cache")    @AuthCheck(mustRole = UserConstant.ADMIN_ROLE)    public void cacheGenerator(@RequestBody GeneratorCacheRequest generatorCacheRequest, HttpServletRequest request, HttpServletResponse response) throws IOException {        if (generatorCacheRequest == null || generatorCacheRequest.getId() <= 0) {            throw new BusinessException(ErrorCode.PARAMS_ERROR);        }        long id = generatorCacheRequest.getId();        Generator generator = generatorService.getById(id);        if (generator == null) {            throw new BusinessException(ErrorCode.NOT_FOUND_ERROR);        }        String distPath = generator.getDistPath();        if (StrUtil.isBlank(distPath)) {            throw new BusinessException(ErrorCode.NOT_FOUND_ERROR, "产物包不存在");        }        String zipFilePath = getCacheFilePath(id, distPath);        try {            cosManager.download(distPath, zipFilePath);        } catch (Exception e) {            throw new BusinessException(ErrorCode.SYSTEM_ERROR, "生成器下载失败");        }    }    /**     * 获取缓存文件路径     *     * @param id       id     * @param distPath dist路径     * @return {@link String}     */    public String getCacheFilePath(long id, String distPath) {        String projectPath = System.getProperty("user.dir");        String tempDirPath = String.format("%s/.temp/cache/%s", projectPath, id);        return tempDirPath + "/" + distPath;    }    /**     * 获取分页缓存 keu     *     * @param generatorQueryRequest 生成器查询请求     * @return {@link String}     */    public static String getPageCacheKey(GeneratorQueryRequest generatorQueryRequest) {        String jsonStr = JSONUtil.toJsonStr(generatorQueryRequest);        // 请求参数编码        String base64 = Base64Encoder.encode(jsonStr);        return "generator:page:" + base64;    }}